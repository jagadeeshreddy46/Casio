/*import React, { useState, useRef } from 'react';
import './ExamBot.css';

const ExamBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    { sender: 'bot', text: 'Hi! Ask me about syllabus or previous papers.' }
  ]);
  const [input, setInput] = useState('');
  const recognitionRef = useRef(null);

  const handleSend = () => {
    if (!input.trim()) return;
    const userMessage = { sender: 'user', text: input };
    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setInput('');
    
    const response = generateBotResponse(input.toLowerCase());
    const botMessage = { sender: 'bot', text: response };
    setTimeout(() => {
      setMessages((prev) => [...prev, botMessage]);
      speak(response); // Optional speech output
    }, 500);
  };

  const generateBotResponse = (query) => {
    if (query.includes('question paper')) return 'üìÑ Go to "Papers" section to browse question papers.';
    if (query.includes('syllabus') || query.includes('regulation')) return 'üìò Select your regulation like R20 or R22 in the "Syllabus" tab.';
    if (query.includes('r20') || query.includes('r22')) return '‚úÖ You can find syllabus PDFs in the syllabus tab.';
    if (query.includes('cse') || query.includes('ece')) return 'üîé Choose your branch to see relevant materials.';
    return "ü§ñ I'm here to help! Ask me about syllabus, question papers, or navigation.";
  };

  // Voice input using Speech Recognition API
  const startListening = () => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("Voice input not supported in this browser.");
      return;
    }

    if (!recognitionRef.current) {
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.lang = 'en-IN';
      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        handleSend(transcript);
      };
    }

    recognitionRef.current.start();
  };

  const speak = (text) => {
    const synth = window.speechSynthesis;
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-IN';
    synth.speak(utterance);
  };

  return (
    <>
      <div className={`exam-bot ${isOpen ? 'open' : ''}`}>
        <div className="exam-bot-header">
          üìö Exam Helper Bot
          <button className="close-btn" onClick={() => setIsOpen(false)}>‚úñ</button>
        </div>
        <div className="exam-bot-body">
          {messages.map((msg, i) => (
            <div key={i} className={`message ${msg.sender}`}>{msg.text}</div>
          ))}
        </div>
        <div className="exam-bot-input">
          <input
            type="text"
            placeholder="Ask me anything..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleSend()}
          />
          <button onClick={handleSend}>üì©</button>
          <button onClick={startListening}>üé§</button>
        </div>
      </div>

      <div className="chat-float-btn" onClick={() => setIsOpen(true)}>
        üí¨
      </div>
    </>
  );
};

export default ExamBot;
*/
/*
import React, { useState, useEffect, useRef } from "react";
import './ExamBot.css'
import {
  MessageSquare,
  Send,
  X,
  Zap,
} from "lucide-react";

const knowledgeBase = {
  syllabus: {
    patterns: [
      "syllabus",
      "curriculum",
      "course content",
      "subject",
      "topics",
      "units",
      "course outline",
      "academic plan",
    ],
    responses: [
      `üìö **Syllabus Information:**\n\n‚Ä¢ Visit the "Syllabus" tab for detailed curriculum\n‚Ä¢ Select your regulation (R20/R22/R23)\n‚Ä¢ Choose your branch (CSE/ECE/EEE/MECH/CIVIL)\n‚Ä¢ Download PDF files for complete course content\n‚Ä¢ Each unit covers specific learning outcomes\n‚Ä¢ Check for latest updates and revisions`,
      `üìñ **Curriculum Details:**\n\n‚Ä¢ **R20 Regulation:** Industry-focused curriculum\n‚Ä¢ **R22 Regulation:** AI/ML integrated syllabus\n‚Ä¢ **R23 Regulation:** Latest with emerging technologies\n‚Ä¢ Core subjects + Electives available\n‚Ä¢ Practical and theory components included\n‚Ä¢ Credit system clearly defined`,
    ],
  },
  papers: {
    patterns: [
      "question paper",
      "previous paper",
      "past paper",
      "exam paper",
      "test paper",
      "sample paper",
      "model paper",
      "exam pattern",
    ],
    responses: [
      `üìÑ **Previous Question Papers:**\n\n‚Ä¢ Navigate to "Papers" section\n‚Ä¢ Filter by: Year, Subject, Regulation, Branch\n‚Ä¢ Download in PDF format\n‚Ä¢ Practice with time constraints\n‚Ä¢ Analyze question patterns and weightage\n‚Ä¢ Focus on frequently asked topics\n‚Ä¢ Note marking scheme variations`,
      `üéØ **Question Paper Strategy:**\n\n‚Ä¢ **Last 5 years:** Essential for pattern recognition\n‚Ä¢ **Unit-wise analysis:** Identify high-weightage units\n‚Ä¢ **Time management:** Practice with 3-hour limit\n‚Ä¢ **Question types:** MCQ, Short answer, Long answer\n‚Ä¢ **Marking scheme:** Understand point distribution\n‚Ä¢ **Difficulty levels:** Easy, Medium, Hard categorization`,
    ],
  },
  study: {
    patterns: [
      "study",
      "preparation",
      "prepare",
      "tips",
      "how to study",
      "study plan",
      "study method",
      "learning",
      "revision",
    ],
    responses: [
      `üìù **Effective Study Strategies:**\n\n‚Ä¢ **Active Learning:** Summarize, question, teach others\n‚Ä¢ **Spaced Repetition:** Review at increasing intervals\n‚Ä¢ **Pomodoro Technique:** 25min study + 5min break\n‚Ä¢ **Mind Maps:** Visual representation of concepts\n‚Ä¢ **Practice Tests:** Regular self-assessment\n‚Ä¢ **Study Groups:** Collaborative learning\n‚Ä¢ **Note-taking:** Cornell method recommended`,
      `üéØ **Comprehensive Study Plan:**\n\n‚Ä¢ **6 weeks before:** Complete syllabus coverage\n‚Ä¢ **4 weeks before:** Intensive revision + notes\n‚Ä¢ **2 weeks before:** Previous papers + mock tests\n‚Ä¢ **1 week before:** Quick revision + weak areas\n‚Ä¢ **3 days before:** Light review only\n‚Ä¢ **1 day before:** Relax + organize materials\n‚Ä¢ **Exam day:** Confident execution`,
    ],
  },
  time: {
    patterns: [
      "time management",
      "schedule",
      "timetable",
      "plan",
      "organize",
      "planning",
      "time table",
      "routine",
    ],
    responses: [
      `‚è∞ **Time Management Mastery:**\n\n‚Ä¢ **Pomodoro Technique:** 25min focus + 5min break\n‚Ä¢ **Priority Matrix:** Urgent vs Important tasks\n‚Ä¢ **Time Blocking:** Dedicated slots for subjects\n‚Ä¢ **Daily Goals:** Specific, measurable targets\n‚Ä¢ **Progress Tracking:** Monitor completion rates\n‚Ä¢ **Flexibility:** Allow buffer time for adjustments\n‚Ä¢ **Rest Periods:** Essential for retention`,
      `üìÖ **Optimal Daily Schedule:**\n\n‚Ä¢ **6:00-8:00 AM:** Difficult subjects (peak focus)\n‚Ä¢ **9:00-12:00 PM:** Moderate subjects\n‚Ä¢ **2:00-5:00 PM:** Practice problems\n‚Ä¢ **6:00-8:00 PM:** Revision + notes\n‚Ä¢ **8:30-10:00 PM:** Light reading\n‚Ä¢ **Breaks:** 15min every 2 hours\n‚Ä¢ **Exercise:** 30min daily for mental health`,
    ],
  },
  motivation: {
    patterns: [
      "stress",
      "anxiety",
      "motivation",
      "confidence",
      "nervous",
      "worried",
      "pressure",
      "mental health",
      "burnout",
    ],
    responses: [
      `üåü **Stay Motivated & Confident:**\n\n‚Ä¢ **Goal Setting:** SMART goals (Specific, Measurable, Achievable)\n‚Ä¢ **Positive Visualization:** See yourself succeeding\n‚Ä¢ **Reward System:** Celebrate small victories\n‚Ä¢ **Support Network:** Family, friends, mentors\n‚Ä¢ **Self-Care:** Adequate sleep, nutrition, exercise\n‚Ä¢ **Mindfulness:** Meditation and breathing exercises\n‚Ä¢ **Progress Journal:** Track improvements daily`,
      `üòå **Stress Management Techniques:**\n\n‚Ä¢ **Deep Breathing:** 4-7-8 technique for instant calm\n‚Ä¢ **Progressive Relaxation:** Tense and release muscles\n‚Ä¢ **Exercise:** 30min daily reduces cortisol\n‚Ä¢ **Sleep Hygiene:** 7-8 hours quality sleep\n‚Ä¢ **Healthy Diet:** Brain foods like nuts, fish, fruits\n‚Ä¢ **Social Support:** Talk to trusted friends/family\n‚Ä¢ **Professional Help:** Counselors if needed`,
    ],
  },
  technical: {
    patterns: [
      "programming",
      "coding",
      "algorithm",
      "data structure",
      "computer",
      "software",
      "java",
      "python",
      "c++",
      "database",
    ],
    responses: [
      `üíª **Programming Excellence:**\n\n‚Ä¢ **Daily Practice:** Code minimum 1 hour daily\n‚Ä¢ **Concept First:** Understand before memorizing\n‚Ä¢ **Online Platforms:** HackerRank, LeetCode, CodeChef\n‚Ä¢ **Project Building:** Real-world applications\n‚Ä¢ **Code Review:** Learn from others' solutions\n‚Ä¢ **Documentation:** Comment your code properly\n‚Ä¢ **Version Control:** Learn Git/GitHub`,
      `üîß **Technical Subject Mastery:**\n\n‚Ä¢ **Problem-Solving:** Break complex problems down\n‚Ä¢ **Visual Learning:** Flowcharts, diagrams, UML\n‚Ä¢ **Hands-on Practice:** Lab work and simulations\n‚Ä¢ **Real-world Applications:** Connect theory to practice\n‚Ä¢ **Industry Tools:** Learn relevant software\n‚Ä¢ **Peer Learning:** Study groups and forums\n‚Ä¢ **Continuous Learning:** Stay updated with trends`,
    ],
  },
  examday: {
    patterns: [
      "exam day",
      "during exam",
      "exam hall",
      "exam tips",
      "test day",
      "examination",
      "exam strategy",
    ],
    responses: [
      `üìã **Exam Day Success Checklist:**\n\n‚Ä¢ **Night Before:** 8+ hours sleep, light review only\n‚Ä¢ **Morning:** Nutritious breakfast, avoid heavy meals\n‚Ä¢ **Arrival:** Reach 30 minutes early\n‚Ä¢ **Materials:** ID, admit card, pens, calculator\n‚Ä¢ **Mindset:** Positive affirmations, deep breathing\n‚Ä¢ **Clothing:** Comfortable, weather-appropriate\n‚Ä¢ **Emergency:** Backup pens, contact numbers`,
      `‚úçÔ∏è **During Exam Strategy:**\n\n‚Ä¢ **First 5 minutes:** Read all questions carefully\n‚Ä¢ **Question Selection:** Start with easiest questions\n‚Ä¢ **Time Allocation:** Divide time per question\n‚Ä¢ **Writing Style:** Clear, legible handwriting\n‚Ä¢ **Answer Structure:** Introduction, body, conclusion\n‚Ä¢ **Review Time:** Keep 15 minutes for checking\n‚Ä¢ **Stay Calm:** Deep breaths if feeling overwhelmed`,
    ],
  },
  academic: {
    patterns: [
      "grade",
      "marks",
      "score",
      "cgpa",
      "gpa",
      "result",
      "performance",
      "improvement",
      "marks improvement",
    ],
    responses: [
      `üìä **Academic Performance Enhancement:**\n\n‚Ä¢ **Regular Attendance:** 85%+ for better understanding\n‚Ä¢ **Active Participation:** Ask questions, join discussions\n‚Ä¢ **Assignment Quality:** Submit on time with effort\n‚Ä¢ **Feedback Integration:** Learn from professor comments\n‚Ä¢ **Peer Learning:** Form study groups\n‚Ä¢ **Resource Utilization:** Library, online materials\n‚Ä¢ **Consistent Effort:** Daily progress over cramming`,
      `üéñÔ∏è **Grade Improvement Strategy:**\n\n‚Ä¢ **Weakness Analysis:** Identify problem areas\n‚Ä¢ **Targeted Practice:** Focus on weak subjects\n‚Ä¢ **Additional Resources:** Textbooks, online courses\n‚Ä¢ **Professor Consultation:** Office hours utilization\n‚Ä¢ **Mock Tests:** Regular self-assessment\n‚Ä¢ **Study Techniques:** Try different methods\n‚Ä¢ **Long-term Planning:** Semester-wise goals`,
    ],
  },
  career: {
    patterns: [
      "career",
      "job",
      "placement",
      "interview",
      "resume",
      "internship",
      "future",
      "industry",
      "skills",
    ],
    responses: [
      `üöÄ **Career Preparation Roadmap:**\n\n‚Ä¢ **Academic Excellence:** Maintain 8.5+ CGPA\n‚Ä¢ **Technical Skills:** Programming, tools, certifications\n‚Ä¢ **Soft Skills:** Communication, leadership, teamwork\n‚Ä¢ **Projects:** Build impressive portfolio\n‚Ä¢ **Internships:** Gain real-world experience\n‚Ä¢ **Networking:** Connect with professionals\n‚Ä¢ **Resume Building:** Highlight achievements`,
      `üíº **Industry Readiness:**\n\n‚Ä¢ **Current Trends:** AI, ML, Cloud, Cybersecurity\n‚Ä¢ **Skill Development:** Continuous learning mindset\n‚Ä¢ **Certifications:** AWS, Google, Microsoft, Cisco\n‚Ä¢ **Communication:** English proficiency essential\n‚Ä¢ **Problem Solving:** Analytical thinking\n‚Ä¢ **Adaptability:** Ready for change\n‚Ä¢ **Professional Ethics:** Integrity and responsibility`,
    ],
  },
  mathematics: {
    patterns: [
      "math",
      "mathematics",
      "calculus",
      "algebra",
      "statistics",
      "probability",
      "geometry",
      "trigonometry",
    ],
    responses: [
      `üî¢ **Mathematics Mastery:**\n\n‚Ä¢ **Concept Understanding:** Why before how\n‚Ä¢ **Formula Derivation:** Understand origins\n‚Ä¢ **Step-by-step Solutions:** Show all work\n‚Ä¢ **Practice Variety:** Different problem types\n‚Ä¢ **Visual Learning:** Graphs, diagrams, charts\n‚Ä¢ **Error Analysis:** Learn from mistakes\n‚Ä¢ **Application Focus:** Real-world connections`,
      `üìê **Mathematical Problem Solving:**\n\n‚Ä¢ **Read Carefully:** Understand what's asked\n‚Ä¢ **Identify Given:** List known information\n‚Ä¢ **Choose Method:** Select appropriate technique\n‚Ä¢ **Work Systematically:** Logical progression\n‚Ä¢ **Check Answers:** Verify reasonableness\n‚Ä¢ **Alternative Methods:** Multiple approaches\n‚Ä¢ **Pattern Recognition:** Look for similarities`,
    ],
  },
  science: {
    patterns: [
      "physics",
      "chemistry",
      "biology",
      "science",
      "experiment",
      "lab",
      "theory",
      "practical",
    ],
    responses: [
      `üß™ **Science Subject Excellence:**\n\n‚Ä¢ **Concept First:** Theory before application\n‚Ä¢ **Visual Learning:** Diagrams, models, animations\n‚Ä¢ **Practical Work:** Lab experiments essential\n‚Ä¢ **Formula Understanding:** Derivation and application\n‚Ä¢ **Real-world Examples:** Connect to daily life\n‚Ä¢ **Problem Practice:** Numerical and conceptual\n‚Ä¢ **Scientific Method:** Observation, hypothesis, testing`,
      `üî¨ **Laboratory Skills:**\n\n‚Ä¢ **Safety First:** Follow all protocols\n‚Ä¢ **Accurate Measurements:** Precision matters\n‚Ä¢ **Observation Skills:** Record everything\n‚Ä¢ **Data Analysis:** Interpret results correctly\n‚Ä¢ **Report Writing:** Clear, concise documentation\n‚Ä¢ **Error Analysis:** Understand uncertainties\n‚Ä¢ **Hypothesis Testing:** Scientific reasoning`,
    ],
  },
};

const quickActions = [
  { label: "Syllabus", key: "syllabus", icon: <Zap size={14} /> },
  { label: "Previous Papers", key: "papers", icon: <Zap size={14} /> },
  { label: "Study Tips", key: "study", icon: <Zap size={14} /> },
  { label: "Time Management", key: "time", icon: <Zap size={14} /> },
  { label: "Motivation", key: "motivation", icon: <Zap size={14} /> },
  { label: "Technical Subjects", key: "technical", icon: <Zap size={14} /> },
  { label: "Exam Day Tips", key: "examday", icon: <Zap size={14} /> },
  { label: "Grades & Performance", key: "academic", icon: <Zap size={14} /> },
  { label: "Career Guidance", key: "career", icon: <Zap size={14} /> },
  { label: "Mathematics", key: "mathematics", icon: <Zap size={14} /> },
  { label: "Science", key: "science", icon: <Zap size={14} /> },
];

const ExamBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      sender: "bot",
      text: `Hi! I'm your comprehensive Exam Helper Bot. I can help you with syllabus, previous papers, study tips, exam preparation, time management, stress management, technical subjects, career guidance, and much more. What would you like to know?`,
    },
  ]);
  const [input, setInput] = useState("");
  const [showQuickActions, setShowQuickActions] = useState(true);
  const messagesEndRef = useRef(null);

  // Scroll messages to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Handle user input submission
  const handleSend = () => {
    if (!input.trim()) return;

    const userMessage = { sender: "user", text: input.trim() };
    setMessages((prev) => [...prev, userMessage]);
    setShowQuickActions(false);

    // Simple knowledge base lookup (case-insensitive)
    const lowerInput = input.toLowerCase();
    let found = false;
    for (const key in knowledgeBase) {
      if (
        knowledgeBase[key].patterns.some((pattern) =>
          lowerInput.includes(pattern)
        )
      ) {
        const kbResponses = knowledgeBase[key].responses;
        const botResponse = kbResponses[Math.floor(Math.random() * kbResponses.length)];

        setTimeout(() => {
          setMessages((prev) => [...prev, { sender: "bot", text: botResponse }]);
        }, 1000);

        found = true;
        break;
      }
    }

    if (!found) {
      setTimeout(() => {
        setMessages((prev) => [
          ...prev,
          {
            sender: "bot",
            text:
              "Sorry, I didn't understand that. Please ask about syllabus, papers, study tips, or other topics.",
          },
        ]);
      }, 1000);
    }

    setInput("");
  };

  // Handle quick action click
  const handleQuickActionClick = (key) => {
    const kbResponses = knowledgeBase[key]?.responses;
    if (!kbResponses) return;

    const botResponse =
      kbResponses[Math.floor(Math.random() * kbResponses.length)];

    setMessages((prev) => [
      ...prev,
      { sender: "user", text: key.charAt(0).toUpperCase() + key.slice(1) },
      { sender: "bot", text: botResponse },
    ]);
    setShowQuickActions(false);
  };

  // Toggle chat open/close
  const toggleOpen = () => {
    setIsOpen((open) => !open);
    if (!isOpen) {
      setShowQuickActions(true);
    }
  };

  // Handle enter key in input
  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleSend();
    }
  };

  return (
    <div className="exambot-container">
      {isOpen ? (
        <div className="exambot-widget open" role="dialog" aria-modal="true" aria-label="Exam Helper Chatbot">
          <div className="exambot-header">
            <div>
              <h3>Exam Helper Bot</h3>
              <p>Ask me anything about exams & study!</p>
            </div>
            <button
              onClick={toggleOpen}
              aria-label="Close chat"
              className="exambot-close-btn"
              type="button"
            >
              <X size={20} />
            </button>
          </div>

          {showQuickActions && (
            <div className="exambot-quick-actions" aria-label="Quick topics">
              <p>Quick Topics:</p>
              <div className="actions-grid">
                {quickActions.map(({ label, key, icon }) => (
                  <button
                    key={key}
                    onClick={() => handleQuickActionClick(key)}
                    type="button"
                    aria-label={`Ask about ${label}`}
                  >
                    {icon} {label}
                  </button>
                ))}
              </div>
            </div>
          )}

          <div className="exambot-messages" aria-live="polite" aria-atomic="false">
            {messages.map((msg, i) => (
              <div
                key={i}
                className={`message ${msg.sender}`}
                role={msg.sender === "bot" ? "alert" : "text"}
                aria-live={msg.sender === "bot" ? "polite" : "off"}
              >
                {msg.text.split("\n").map((line, idx) => (
                  <p key={idx}>{line}</p>
                ))}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          <div className="exambot-input-area">
            <input
              type="text"
              aria-label="Type your question here"
              className="exambot-input"
              placeholder="Type your question..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyPress}
              autoComplete="off"
            />
            <button
              onClick={handleSend}
              className="button"
              aria-label="Send message"
              disabled={!input.trim()}
              type="button"
            >
              <Send size={20} />
            </button>
          </div>
        </div>
      ) : (
        <button
          aria-label="Open chat"
          className="chat-toggle-btn"
          onClick={toggleOpen}
          type="button"
        >
          <MessageSquare size={24} />
          <div className="ai-badge" aria-hidden="true">
            AI
          </div>
        </button>
      )}
    </div>
  );
};

export default ExamBot;
